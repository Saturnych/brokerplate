version: "3.3"

services:

  lab:
    build:
      context: .
    image: lab
    env_file: docker-compose.env
    environment:
      NODEID: labNode
      SERVICES: lab.service
      PORT: 3210
    ports:
      - 3210:3210
    depends_on:
      nats:
        condition: service_started
    networks:
      - default
      - gateway

  api:
    restart: unless-stopped
    build:
      context: .
    image: api
    deploy:
      replicas: 3
    env_file: docker-compose.env
    environment:
      NODEID: apiNode
      SERVICEDIR: app/dist/src/services/api
      PORT: 2000
    healthcheck:
      test: ['CMD-SHELL', 'curl --fail http://localhost:2000/health || exit 1']
      interval: 30s
      timeout: 5s
      retries: 10
    depends_on:
        nats:
          condition: service_started
    networks:
      - default
      - gateway

  auth:
    build:
      context: .
    image: auth
    env_file: docker-compose.env
    environment:
      NODEID: authNode
      SERVICEDIR: app/dist/src/services/auth
      PORT: 2002
    depends_on:
        api:
          condition: service_healthy
        nats:
          condition: service_started
        redis:
          condition: service_started
    networks:
      - default
      - gateway

  posts:
    build:
      context: .
    image: posts
    env_file: docker-compose.env
    environment:
      NODEID: postsNode
      SERVICEDIR: app/dist/src/services/posts
      PORT: 2003
    depends_on:
        postgres:
          condition: service_healthy
        nats:
          condition: service_started
    networks:
      - default
      - gateway

  products:
    build:
      context: .
    image: products
    env_file: docker-compose.env
    environment:
      NODEID: productsNode
      SERVICEDIR: app/dist/src/services/products
      PORT: 2004
    depends_on:
        postgres:
          condition: service_healthy
        nats:
          condition: service_started
    networks:
      - default
      - gateway

  postgres:
    image: postgres:13-alpine
    env_file: docker-compose.env
    environment:
      PGDATA: /var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ./temp:/var/lib/postgresql/data
    networks:
      - default
      - gateway

  mongo:
    image: mongo:4
    networks:
      - default
      - gateway

  nats:
    image: nats:2
    networks:
      - default
      - gateway

  redis:
    image: redis:alpine
    env_file: docker-compose.env
    ports:
      - 6379:6379
    networks:
      - default
      - gateway

  proxy:
    restart: unless-stopped
    image: nginx
    env_file: docker-compose.env
    ports:
      - 8000:8000
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      api:
        condition: service_started
    networks:
      - default
      - gateway

networks:
  gateway: {}
  default:
    internal: true

volumes:
  data:
