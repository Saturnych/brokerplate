version: "3.3"

services:

  lab:
    build:
      context: .
    image: lab
    env_file: docker-compose.env
    environment:
      NODEID: labNode
      SERVICES: lab.service
      PORT: 3210
    ports:
      - 3210:3210
    depends_on:
      api:
        condition: service_started
      nats:
        condition: service_started
    networks:
      - internal

  api:
    build:
      context: .
    image: api
    deploy:
      replicas: 3
    env_file: docker-compose.env
    environment:
      NODEID: apiNode
      SERVICEDIR: app/dist/src/services/api
      PORT: 3000
    healthcheck:
      test: ['CMD-SHELL', 'curl --fail http://localhost:3000/health || exit 1']
      interval: 30s
      timeout: 5s
      retries: 10
    depends_on:
        nats:
          condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal

  auth:
    build:
      context: .
    image: auth
    env_file: docker-compose.env
    environment:
      NODEID: authNode
      SERVICEDIR: app/dist/src/services/auth
      PORT: 2001
    depends_on:
        api:
          condition: service_started
        nats:
          condition: service_started
        redis:
          condition: service_started
    networks:
      - internal

  posts:
    build:
      context: .
    image: posts
    env_file: docker-compose.env
    environment:
      NODEID: postsNode
      SERVICEDIR: app/dist/src/services/posts
      PORT: 2002
    depends_on:
        postgres:
          condition: service_healthy
        nats:
          condition: service_started
    networks:
      - internal

  products:
    build:
      context: .
    image: products
    env_file: docker-compose.env
    environment:
      NODEID: productsNode
      SERVICEDIR: app/dist/src/services/products
      PORT: 2003
    depends_on:
        postgres:
          condition: service_healthy
        nats:
          condition: service_started
    networks:
      - internal

  postgres:
    image: postgres:13-alpine
    env_file: docker-compose.env
    environment:
      PGDATA: /var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ./temp:/var/lib/postgresql/data
    networks:
      - internal

  mongo:
    image: mongo:4
    networks:
      - internal

  nats:
    image: nats:2
    networks:
      - internal

  redis:
    image: redis:alpine
    env_file: docker-compose.env
    ports:
      - 6379:6379
    networks:
      - internal

  hoppscotch:
    image: hoppscotch/hoppscotch:latest
    ports:
      - 3030:3000
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

networks:
  internal:

volumes:
  data:
