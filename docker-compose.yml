version: "3.3"

services:

  api:
    build:
      context: .
    image: moleculer-broker
    env_file: docker-compose.env
    environment:
      NODEID: apiNode
      SERVICEDIR: dist/src/services/api
      PORT: 3000
    depends_on:
      - nats
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal

  auth:
    build:
      context: .
    image: moleculer-broker
    env_file: docker-compose.env
    environment:
      NODEID: authNode
      SERVICEDIR: dist/src/services/auth
    depends_on:
      - nats
      - redis
    networks:
      - internal

  posts:
    build:
      context: .
    image: moleculer-broker
    env_file: docker-compose.env
    environment:
      NODEID: postsNode
      SERVICEDIR: dist/src/services/posts
    depends_on:
      - postgres
      - nats
      - redis
    networks:
      - internal

  products:
    build:
      context: .
    image: moleculer-broker
    env_file: docker-compose.env
    environment:
      NODEID: productsNode
      SERVICEDIR: dist/src/services/products
    depends_on:
      - postgres
      - nats
      - redis
    networks:
      - internal

  postgres:
    image: postgres:13-alpine
    env_file: docker-compose.env
    environment:
      PGDATA: /var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ../data:/var/lib/postgresql/data
    networks:
      - internal

  mongo:
    image: mongo:4
    networks:
      - internal

  nats:
    image: nats:2
    networks:
      - internal

  redis:
    image: redis:alpine
    networks:
      - internal

  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 3000:80
      - 3001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

networks:
  internal:

volumes:
  data:
